//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientManagement.Backend.Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        bool Register(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.UserDAO[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.UserDAO[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangePassword", ReplyAction="http://tempuri.org/IService1/ChangePasswordResponse")]
        bool ChangePassword(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangePassword", ReplyAction="http://tempuri.org/IService1/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        bool Login(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetClients", ReplyAction="http://tempuri.org/IService1/GetClientsResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.ClientDAO[] GetClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetClients", ReplyAction="http://tempuri.org/IService1/GetClientsResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ClientDAO[]> GetClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAddress", ReplyAction="http://tempuri.org/IService1/GetAddressResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.AddressDAO[] GetAddress();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAddress", ReplyAction="http://tempuri.org/IService1/GetAddressResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.AddressDAO[]> GetAddressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddClient", ReplyAction="http://tempuri.org/IService1/AddClientResponse")]
        bool AddClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddClient", ReplyAction="http://tempuri.org/IService1/AddClientResponse")]
        System.Threading.Tasks.Task<bool> AddClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateClient", ReplyAction="http://tempuri.org/IService1/UpdateClientResponse")]
        bool UpdateClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateClient", ReplyAction="http://tempuri.org/IService1/UpdateClientResponse")]
        System.Threading.Tasks.Task<bool> UpdateClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteClient", ReplyAction="http://tempuri.org/IService1/DeleteClientResponse")]
        bool DeleteClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteClient", ReplyAction="http://tempuri.org/IService1/DeleteClientResponse")]
        System.Threading.Tasks.Task<bool> DeleteClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        bool UpdateUser(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddType", ReplyAction="http://tempuri.org/IService1/AddTypeResponse")]
        bool AddType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddType", ReplyAction="http://tempuri.org/IService1/AddTypeResponse")]
        System.Threading.Tasks.Task<bool> AddTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateType", ReplyAction="http://tempuri.org/IService1/UpdateTypeResponse")]
        bool UpdateType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateType", ReplyAction="http://tempuri.org/IService1/UpdateTypeResponse")]
        System.Threading.Tasks.Task<bool> UpdateTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypes", ReplyAction="http://tempuri.org/IService1/GetTypesResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO[] GetTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypes", ReplyAction="http://tempuri.org/IService1/GetTypesResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO[]> GetTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteType", ReplyAction="http://tempuri.org/IService1/DeleteTypeResponse")]
        bool DeleteType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteType", ReplyAction="http://tempuri.org/IService1/DeleteTypeResponse")]
        System.Threading.Tasks.Task<bool> DeleteTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddJob", ReplyAction="http://tempuri.org/IService1/AddJobResponse")]
        bool AddJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddJob", ReplyAction="http://tempuri.org/IService1/AddJobResponse")]
        System.Threading.Tasks.Task<bool> AddJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateJob", ReplyAction="http://tempuri.org/IService1/UpdateJobResponse")]
        bool UpdateJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateJob", ReplyAction="http://tempuri.org/IService1/UpdateJobResponse")]
        System.Threading.Tasks.Task<bool> UpdateJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetJobs", ReplyAction="http://tempuri.org/IService1/GetJobsResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.JobDAO[] GetJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetJobs", ReplyAction="http://tempuri.org/IService1/GetJobsResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.JobDAO[]> GetJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteJob", ReplyAction="http://tempuri.org/IService1/DeleteJobResponse")]
        bool DeleteJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteJob", ReplyAction="http://tempuri.org/IService1/DeleteJobResponse")]
        System.Threading.Tasks.Task<bool> DeleteJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetExpenses", ReplyAction="http://tempuri.org/IService1/GetExpensesResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO[] GetExpenses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetExpenses", ReplyAction="http://tempuri.org/IService1/GetExpensesResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO[]> GetExpensesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddExpense", ReplyAction="http://tempuri.org/IService1/AddExpenseResponse")]
        bool AddExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddExpense", ReplyAction="http://tempuri.org/IService1/AddExpenseResponse")]
        System.Threading.Tasks.Task<bool> AddExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateExpense", ReplyAction="http://tempuri.org/IService1/UpdateExpenseResponse")]
        bool UpdateExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateExpense", ReplyAction="http://tempuri.org/IService1/UpdateExpenseResponse")]
        System.Threading.Tasks.Task<bool> UpdateExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteExpense", ReplyAction="http://tempuri.org/IService1/DeleteExpenseResponse")]
        bool DeleteExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteExpense", ReplyAction="http://tempuri.org/IService1/DeleteExpenseResponse")]
        System.Threading.Tasks.Task<bool> DeleteExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetJobExpenses", ReplyAction="http://tempuri.org/IService1/GetJobExpensesResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO[] GetJobExpenses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetJobExpenses", ReplyAction="http://tempuri.org/IService1/GetJobExpensesResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO[]> GetJobExpensesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddJobExpense", ReplyAction="http://tempuri.org/IService1/AddJobExpenseResponse")]
        bool AddJobExpense(ClientManagement.Backend.Logic.ServiceReference1.JobDAO jn, ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddJobExpense", ReplyAction="http://tempuri.org/IService1/AddJobExpenseResponse")]
        System.Threading.Tasks.Task<bool> AddJobExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO jn, ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateJobExpense", ReplyAction="http://tempuri.org/IService1/UpdateJobExpenseResponse")]
        bool UpdateJobExpense(ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateJobExpense", ReplyAction="http://tempuri.org/IService1/UpdateJobExpenseResponse")]
        System.Threading.Tasks.Task<bool> UpdateJobExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteJobExpense", ReplyAction="http://tempuri.org/IService1/DeleteJobExpenseResponse")]
        bool DeleteJobExpense(ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteJobExpense", ReplyAction="http://tempuri.org/IService1/DeleteJobExpenseResponse")]
        System.Threading.Tasks.Task<bool> DeleteJobExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO ex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ClientManagement.Backend.Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ClientManagement.Backend.Client.ServiceReference1.IService1>, ClientManagement.Backend.Client.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Register(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.RegisterAsync(user);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.UserDAO[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.UserDAO[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public bool ChangePassword(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.ChangePassword(user);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.ChangePasswordAsync(user);
        }
        
        public bool Login(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.Login(user);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.LoginAsync(user);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.ClientDAO[] GetClients() {
            return base.Channel.GetClients();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ClientDAO[]> GetClientsAsync() {
            return base.Channel.GetClientsAsync();
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.AddressDAO[] GetAddress() {
            return base.Channel.GetAddress();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.AddressDAO[]> GetAddressAsync() {
            return base.Channel.GetAddressAsync();
        }
        
        public bool AddClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.AddClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> AddClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.AddClientAsync(client);
        }
        
        public bool UpdateClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.UpdateClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.UpdateClientAsync(client);
        }
        
        public bool DeleteClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.DeleteClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.DeleteClientAsync(client);
        }
        
        public bool UpdateUser(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public bool AddType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.AddType(service);
        }
        
        public System.Threading.Tasks.Task<bool> AddTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.AddTypeAsync(service);
        }
        
        public bool UpdateType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.UpdateType(service);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.UpdateTypeAsync(service);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO[] GetTypes() {
            return base.Channel.GetTypes();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO[]> GetTypesAsync() {
            return base.Channel.GetTypesAsync();
        }
        
        public bool DeleteType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.DeleteType(service);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.DeleteTypeAsync(service);
        }
        
        public bool AddJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.AddJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> AddJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.AddJobAsync(job);
        }
        
        public bool UpdateJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.UpdateJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.UpdateJobAsync(job);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.JobDAO[] GetJobs() {
            return base.Channel.GetJobs();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.JobDAO[]> GetJobsAsync() {
            return base.Channel.GetJobsAsync();
        }
        
        public bool DeleteJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.DeleteJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.DeleteJobAsync(job);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO[] GetExpenses() {
            return base.Channel.GetExpenses();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO[]> GetExpensesAsync() {
            return base.Channel.GetExpensesAsync();
        }
        
        public bool AddExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.AddExpense(ex);
        }
        
        public System.Threading.Tasks.Task<bool> AddExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.AddExpenseAsync(ex);
        }
        
        public bool UpdateExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.UpdateExpense(ex);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.UpdateExpenseAsync(ex);
        }
        
        public bool DeleteExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.DeleteExpense(ex);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.DeleteExpenseAsync(ex);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO[] GetJobExpenses() {
            return base.Channel.GetJobExpenses();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO[]> GetJobExpensesAsync() {
            return base.Channel.GetJobExpensesAsync();
        }
        
        public bool AddJobExpense(ClientManagement.Backend.Logic.ServiceReference1.JobDAO jn, ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.AddJobExpense(jn, ex);
        }
        
        public System.Threading.Tasks.Task<bool> AddJobExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO jn, ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.AddJobExpenseAsync(jn, ex);
        }
        
        public bool UpdateJobExpense(ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO ex) {
            return base.Channel.UpdateJobExpense(ex);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateJobExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO ex) {
            return base.Channel.UpdateJobExpenseAsync(ex);
        }
        
        public bool DeleteJobExpense(ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO ex) {
            return base.Channel.DeleteJobExpense(ex);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteJobExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.JobExpenseDAO ex) {
            return base.Channel.DeleteJobExpenseAsync(ex);
        }
    }
}
