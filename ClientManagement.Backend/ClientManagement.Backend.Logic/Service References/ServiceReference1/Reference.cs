//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientManagement.Backend.Logic.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDAO", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.DbService.Models")]
    [System.SerializableAttribute()]
    public partial class UserDAO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccessFailedCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EmailConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockoutEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LockoutEndDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PhoneNumberConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecurityStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TwoFactorEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessFailedCount {
            get {
                return this.AccessFailedCountField;
            }
            set {
                if ((this.AccessFailedCountField.Equals(value) != true)) {
                    this.AccessFailedCountField = value;
                    this.RaisePropertyChanged("AccessFailedCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EmailConfirmed {
            get {
                return this.EmailConfirmedField;
            }
            set {
                if ((this.EmailConfirmedField.Equals(value) != true)) {
                    this.EmailConfirmedField = value;
                    this.RaisePropertyChanged("EmailConfirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LockoutEnabled {
            get {
                return this.LockoutEnabledField;
            }
            set {
                if ((this.LockoutEnabledField.Equals(value) != true)) {
                    this.LockoutEnabledField = value;
                    this.RaisePropertyChanged("LockoutEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LockoutEndDateUtc {
            get {
                return this.LockoutEndDateUtcField;
            }
            set {
                if ((this.LockoutEndDateUtcField.Equals(value) != true)) {
                    this.LockoutEndDateUtcField = value;
                    this.RaisePropertyChanged("LockoutEndDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PhoneNumberConfirmed {
            get {
                return this.PhoneNumberConfirmedField;
            }
            set {
                if ((this.PhoneNumberConfirmedField.Equals(value) != true)) {
                    this.PhoneNumberConfirmedField = value;
                    this.RaisePropertyChanged("PhoneNumberConfirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityStamp {
            get {
                return this.SecurityStampField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityStampField, value) != true)) {
                    this.SecurityStampField = value;
                    this.RaisePropertyChanged("SecurityStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StreetAddress {
            get {
                return this.StreetAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetAddressField, value) != true)) {
                    this.StreetAddressField = value;
                    this.RaisePropertyChanged("StreetAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TwoFactorEnabled {
            get {
                return this.TwoFactorEnabledField;
            }
            set {
                if ((this.TwoFactorEnabledField.Equals(value) != true)) {
                    this.TwoFactorEnabledField = value;
                    this.RaisePropertyChanged("TwoFactorEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Zip {
            get {
                return this.ZipField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipField, value) != true)) {
                    this.ZipField = value;
                    this.RaisePropertyChanged("Zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientDAO", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.DbService.Models")]
    [System.SerializableAttribute()]
    public partial class ClientDAO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientManagement.Backend.Logic.ServiceReference1.AddressDAO AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AddressIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientManagement.Backend.Logic.ServiceReference1.AddressDAO Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AddressID {
            get {
                return this.AddressIDField;
            }
            set {
                if ((this.AddressIDField.Equals(value) != true)) {
                    this.AddressIDField = value;
                    this.RaisePropertyChanged("AddressID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDAO", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.DbService.Models")]
    [System.SerializableAttribute()]
    public partial class AddressDAO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Zip {
            get {
                return this.ZipField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipField, value) != true)) {
                    this.ZipField = value;
                    this.RaisePropertyChanged("Zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceTypeDAO", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.DbService.Models")]
    [System.SerializableAttribute()]
    public partial class ServiceTypeDAO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> RateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobDAO", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.DbService.Models")]
    [System.SerializableAttribute()]
    public partial class JobDAO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientManagement.Backend.Logic.ServiceReference1.ClientDAO ClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CompleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ExpenseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ExpenseIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO ServiceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientManagement.Backend.Logic.ServiceReference1.UserDAO UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientManagement.Backend.Logic.ServiceReference1.ClientDAO Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientID {
            get {
                return this.ClientIDField;
            }
            set {
                if ((this.ClientIDField.Equals(value) != true)) {
                    this.ClientIDField = value;
                    this.RaisePropertyChanged("ClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Complete {
            get {
                return this.CompleteField;
            }
            set {
                if ((this.CompleteField.Equals(value) != true)) {
                    this.CompleteField = value;
                    this.RaisePropertyChanged("Complete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO Expense {
            get {
                return this.ExpenseField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpenseField, value) != true)) {
                    this.ExpenseField = value;
                    this.RaisePropertyChanged("Expense");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExpenseID {
            get {
                return this.ExpenseIDField;
            }
            set {
                if ((this.ExpenseIDField.Equals(value) != true)) {
                    this.ExpenseIDField = value;
                    this.RaisePropertyChanged("ExpenseID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO ServiceType {
            get {
                return this.ServiceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceTypeField, value) != true)) {
                    this.ServiceTypeField = value;
                    this.RaisePropertyChanged("ServiceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceTypeID {
            get {
                return this.ServiceTypeIDField;
            }
            set {
                if ((this.ServiceTypeIDField.Equals(value) != true)) {
                    this.ServiceTypeIDField = value;
                    this.RaisePropertyChanged("ServiceTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientManagement.Backend.Logic.ServiceReference1.UserDAO User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExpenseDAO", Namespace="http://schemas.datacontract.org/2004/07/ClientManagement.DbService.Models")]
    [System.SerializableAttribute()]
    public partial class ExpenseDAO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        bool Register(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.UserDAO[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.UserDAO[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangePassword", ReplyAction="http://tempuri.org/IService1/ChangePasswordResponse")]
        bool ChangePassword(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangePassword", ReplyAction="http://tempuri.org/IService1/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        bool Login(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetClients", ReplyAction="http://tempuri.org/IService1/GetClientsResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.ClientDAO[] GetClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetClients", ReplyAction="http://tempuri.org/IService1/GetClientsResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ClientDAO[]> GetClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAddress", ReplyAction="http://tempuri.org/IService1/GetAddressResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.AddressDAO[] GetAddress();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAddress", ReplyAction="http://tempuri.org/IService1/GetAddressResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.AddressDAO[]> GetAddressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddClient", ReplyAction="http://tempuri.org/IService1/AddClientResponse")]
        bool AddClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddClient", ReplyAction="http://tempuri.org/IService1/AddClientResponse")]
        System.Threading.Tasks.Task<bool> AddClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateClient", ReplyAction="http://tempuri.org/IService1/UpdateClientResponse")]
        bool UpdateClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateClient", ReplyAction="http://tempuri.org/IService1/UpdateClientResponse")]
        System.Threading.Tasks.Task<bool> UpdateClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteClient", ReplyAction="http://tempuri.org/IService1/DeleteClientResponse")]
        bool DeleteClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteClient", ReplyAction="http://tempuri.org/IService1/DeleteClientResponse")]
        System.Threading.Tasks.Task<bool> DeleteClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        bool UpdateUser(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddType", ReplyAction="http://tempuri.org/IService1/AddTypeResponse")]
        bool AddType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddType", ReplyAction="http://tempuri.org/IService1/AddTypeResponse")]
        System.Threading.Tasks.Task<bool> AddTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateType", ReplyAction="http://tempuri.org/IService1/UpdateTypeResponse")]
        bool UpdateType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateType", ReplyAction="http://tempuri.org/IService1/UpdateTypeResponse")]
        System.Threading.Tasks.Task<bool> UpdateTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypes", ReplyAction="http://tempuri.org/IService1/GetTypesResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO[] GetTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypes", ReplyAction="http://tempuri.org/IService1/GetTypesResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO[]> GetTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteType", ReplyAction="http://tempuri.org/IService1/DeleteTypeResponse")]
        bool DeleteType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteType", ReplyAction="http://tempuri.org/IService1/DeleteTypeResponse")]
        System.Threading.Tasks.Task<bool> DeleteTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddJob", ReplyAction="http://tempuri.org/IService1/AddJobResponse")]
        bool AddJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddJob", ReplyAction="http://tempuri.org/IService1/AddJobResponse")]
        System.Threading.Tasks.Task<bool> AddJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateJob", ReplyAction="http://tempuri.org/IService1/UpdateJobResponse")]
        bool UpdateJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateJob", ReplyAction="http://tempuri.org/IService1/UpdateJobResponse")]
        System.Threading.Tasks.Task<bool> UpdateJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetJobs", ReplyAction="http://tempuri.org/IService1/GetJobsResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.JobDAO[] GetJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetJobs", ReplyAction="http://tempuri.org/IService1/GetJobsResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.JobDAO[]> GetJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteJob", ReplyAction="http://tempuri.org/IService1/DeleteJobResponse")]
        bool DeleteJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteJob", ReplyAction="http://tempuri.org/IService1/DeleteJobResponse")]
        System.Threading.Tasks.Task<bool> DeleteJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetExpenses", ReplyAction="http://tempuri.org/IService1/GetExpensesResponse")]
        ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO[] GetExpenses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetExpenses", ReplyAction="http://tempuri.org/IService1/GetExpensesResponse")]
        System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO[]> GetExpensesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddExpense", ReplyAction="http://tempuri.org/IService1/AddExpenseResponse")]
        bool AddExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddExpense", ReplyAction="http://tempuri.org/IService1/AddExpenseResponse")]
        System.Threading.Tasks.Task<bool> AddExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateExpense", ReplyAction="http://tempuri.org/IService1/UpdateExpenseResponse")]
        bool UpdateExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateExpense", ReplyAction="http://tempuri.org/IService1/UpdateExpenseResponse")]
        System.Threading.Tasks.Task<bool> UpdateExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteExpense", ReplyAction="http://tempuri.org/IService1/DeleteExpenseResponse")]
        bool DeleteExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteExpense", ReplyAction="http://tempuri.org/IService1/DeleteExpenseResponse")]
        System.Threading.Tasks.Task<bool> DeleteExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ClientManagement.Backend.Logic.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ClientManagement.Backend.Logic.ServiceReference1.IService1>, ClientManagement.Backend.Logic.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Register(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.RegisterAsync(user);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.UserDAO[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.UserDAO[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public bool ChangePassword(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.ChangePassword(user);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.ChangePasswordAsync(user);
        }
        
        public bool Login(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.Login(user);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.LoginAsync(user);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.ClientDAO[] GetClients() {
            return base.Channel.GetClients();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ClientDAO[]> GetClientsAsync() {
            return base.Channel.GetClientsAsync();
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.AddressDAO[] GetAddress() {
            return base.Channel.GetAddress();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.AddressDAO[]> GetAddressAsync() {
            return base.Channel.GetAddressAsync();
        }
        
        public bool AddClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.AddClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> AddClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.AddClientAsync(client);
        }
        
        public bool UpdateClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.UpdateClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.UpdateClientAsync(client);
        }
        
        public bool DeleteClient(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.DeleteClient(client);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClientAsync(ClientManagement.Backend.Logic.ServiceReference1.ClientDAO client) {
            return base.Channel.DeleteClientAsync(client);
        }
        
        public bool UpdateUser(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(ClientManagement.Backend.Logic.ServiceReference1.UserDAO user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public bool AddType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.AddType(service);
        }
        
        public System.Threading.Tasks.Task<bool> AddTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.AddTypeAsync(service);
        }
        
        public bool UpdateType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.UpdateType(service);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.UpdateTypeAsync(service);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO[] GetTypes() {
            return base.Channel.GetTypes();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO[]> GetTypesAsync() {
            return base.Channel.GetTypesAsync();
        }
        
        public bool DeleteType(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.DeleteType(service);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTypeAsync(ClientManagement.Backend.Logic.ServiceReference1.ServiceTypeDAO service) {
            return base.Channel.DeleteTypeAsync(service);
        }
        
        public bool AddJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.AddJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> AddJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.AddJobAsync(job);
        }
        
        public bool UpdateJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.UpdateJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.UpdateJobAsync(job);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.JobDAO[] GetJobs() {
            return base.Channel.GetJobs();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.JobDAO[]> GetJobsAsync() {
            return base.Channel.GetJobsAsync();
        }
        
        public bool DeleteJob(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.DeleteJob(job);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteJobAsync(ClientManagement.Backend.Logic.ServiceReference1.JobDAO job) {
            return base.Channel.DeleteJobAsync(job);
        }
        
        public ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO[] GetExpenses() {
            return base.Channel.GetExpenses();
        }
        
        public System.Threading.Tasks.Task<ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO[]> GetExpensesAsync() {
            return base.Channel.GetExpensesAsync();
        }
        
        public bool AddExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.AddExpense(ex);
        }
        
        public System.Threading.Tasks.Task<bool> AddExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.AddExpenseAsync(ex);
        }
        
        public bool UpdateExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.UpdateExpense(ex);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.UpdateExpenseAsync(ex);
        }
        
        public bool DeleteExpense(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.DeleteExpense(ex);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteExpenseAsync(ClientManagement.Backend.Logic.ServiceReference1.ExpenseDAO ex) {
            return base.Channel.DeleteExpenseAsync(ex);
        }
    }
}
